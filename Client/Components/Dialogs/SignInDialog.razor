@using System.ComponentModel.DataAnnotations
@using Client.Auth
@inject BusTicketsAppClient BusTicketsClient
@inject CustomAuthenticationStateProvider _AuthenticationStateProvider
<MudDialog>
    <TitleContent>
        Sign in
    </TitleContent>
    <DialogContent>
        @foreach (var message in Errors ?? Enumerable.Empty<string>())
        {
            <MudAlert Severity="Severity.Error">@message</MudAlert>
        }
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Email" Class="mt-3"
                                          @bind-Value="model.Email" For="@(() => model.Email)"/>
                            <MudTextField Label="Password" Class="mt-3"
                                          @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Sign in</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm> 
    </DialogContent>
</MudDialog>
@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
    RegisterAccountForm model = new RegisterAccountForm();
    public List<string> Errors = new();

    public class RegisterAccountForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
        

    }

    private async Task OnValidSubmit(EditContext context)
    {
        Errors.Clear();
        var result = await BusTicketsClient.SignInUser.ExecuteAsync(new LogInUserInput()
        {
            Email = model.Email,
            Password = model.Password,
        });
        if (String.IsNullOrEmpty(result.Data?.LogInUser.String))
        {
            Errors.Add("Invalid email or password");
        }
        else  
        {
            Submit();
            await _AuthenticationStateProvider.LoginAsync(result.Data.LogInUser.String);
            //StateHasChanged();
        }
    }
}
