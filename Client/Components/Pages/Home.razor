@page "/"
@using System.ComponentModel.DataAnnotations
@using Client.Components.Dialogs
@using Client.Models
@inject BusTicketsAppClient _BusTicketsClient;
@inject IDialogService _DialogService

<PageTitle>Home</PageTitle>

<EditForm Model="@Input" OnValidSubmit="FindTrip">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="3" sm="3">
            <MudAutocomplete T="City" Label="From city" @bind-Value="Input.StartCity" SearchFunc="@Search" Variant="Variant.Outlined" ShowProgressIndicator="true" ToStringFunc="c => c?.Name ?? String.Empty" For="() => Input.StartCity"/>
            @*
                <MudCardActions>
                    @if (CurrentBus is not null)
                    {
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Rename</MudButton>
                    }
                    else
                    {
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
                    }
                </MudCardActions>
            *@
        </MudItem>
        <MudItem xs="3" sm="3">
            <MudAutocomplete T="City" Label="To city" @bind-Value="Input.EndCity" SearchFunc="@Search" Variant="Variant.Outlined" ShowProgressIndicator="true" ToStringFunc="c => c?.Name ?? String.Empty" For="() => Input.EndCity"/>
        </MudItem>
        <MudItem xs="3" sm="3">
            <MudTextField T="DateTime" Format="yyyy-MM-dd" Label="Date" @bind-Value="Input.Date" InputType="InputType.Date" Variant="Variant.Outlined"/>
        </MudItem>
        <MudItem xs="3" sm="3">
            <MudNumericField HideSpinButtons="true" @bind-Value="Input.NumberOfPassengers" Label="NumberOfPassengers" Variant="Variant.Outlined" Min="1" Max="5" For="() => Input.NumberOfPassengers"/>
        </MudItem>
        <MudItem xs="12" sm="12">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="FindTrip">Find trip</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>
<MudDataGrid @ref="dataGrid" T="Trip" ServerData="ReloadData" Style="margin-top: 50px">
    <Columns>
        <PropertyColumn Property="x => x.DepartureCity.Name" Title="DepartureCity" />
        <PropertyColumn Property="x => x.ArrivalCity.Name" Title="ArrivalCity" />
        <PropertyColumn Property="x => x.DepartureDateTime" Title="Departs at"/>
        <PropertyColumn Property="x => x.ArrivalDateTime" Title="Arrives at"/>
        <PropertyColumn Property="x => x.Price"/>
        <PropertyColumn Property="x => x.NumberOfAvailableSeats" Title="Seats available"/>
        <AuthorizeView>
            <Authorized Context="authContext">
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" >Buy tickets</MudButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Authorized>
        </AuthorizeView>
    </Columns>
</MudDataGrid>

@code {
    public FindTripInput Input = new FindTripInput();
    public MudDataGrid<Trip> dataGrid;
    private async Task<IEnumerable<City>> Search(string value, CancellationToken cancellationToken)
    {
        if (String.IsNullOrEmpty(value) || value.Length < 3)
        {
            return Enumerable.Empty<City>();
        }
        var cityFilterInput = new CityFilterInput()
        {
            Name = new StringOperationFilterInput()
            {
                Contains = value
            }
        };
        var sortInput = new List<CitySortInput>()
        {
            new CitySortInput()
            {
                Name = SortEnumType.Asc
            }
        };
        var result = await _BusTicketsClient.GetCities.ExecuteAsync(10, null, null, null, cityFilterInput, sortInput, cancellationToken);
        return result?.Data?.Cities?.Edges?.Select(c => new City()
        {
            Id = c.Node.Id,
            Name = c.Node.Name
        }) ?? Enumerable.Empty<City>();

    }
        protected async Task<GridData<Trip>> ReloadData(GridState<Trip> state)
    {
        if (Input.StartCity is null || Input.EndCity is null)
        {
            return new GridData<Trip>()
            {
                TotalItems = 0,
                Items = Enumerable.Empty<Trip>()
            };
        }

        var results = await _BusTicketsClient.FindTrips.ExecuteAsync(Input.Date, Input.StartCity.Id, Input.EndCity.Id, Input.NumberOfPassengers);
        var trips = results.Data?.FindTrips?.Select(
            e => new Trip
            {
                Id = e.Id,
                DepartureCity = Input.StartCity,
                ArrivalCity = Input.EndCity,
                NumberOfAvailableSeats = e.TripSeats.OrderBy(rs => rs.Sequence).Skip(e.Timetable.Route.RouteStops.First(rs => rs.City.Id == Input.StartCity.Id).Sequence - 1).SkipLast(e.TripSeats.Count - (e.Timetable.Route.RouteStops.First(rs => rs.City.Id == Input.EndCity.Id).Sequence - 1)).Min(ts => ts.AvailableSeats),
                Price = e.Timetable.Route.RouteStops.OrderBy(rs => rs.Sequence).Skip(e.Timetable.Route.RouteStops.First(rs => rs.City.Id == Input.StartCity.Id).Sequence).SkipLast(e.Timetable.Route.RouteStops.Count - e.Timetable.Route.RouteStops.First(rs => rs.City.Id == Input.EndCity.Id).Sequence).Sum(rs => rs.KmFromPrevStop) * e.PricePerKm * Input.NumberOfPassengers,
                DepartureDateTime = new DateTime(e.Date.Ticks + e.Timetable.TimeOfDeparture.Ticks + e.Timetable.Route.RouteStops.OrderBy(rs => rs.Sequence).Take(e.Timetable.Route.RouteStops.First(rs => rs.City.Id == Input.StartCity.Id).Sequence).Sum(rs => rs.TimeFromPrevStop.Ticks)),
                ArrivalDateTime = new DateTime(e.Date.Ticks + e.Timetable.TimeOfDeparture.Ticks + e.Timetable.Route.RouteStops.OrderBy(rs => rs.Sequence).Take(e.Timetable.Route.RouteStops.First(rs => rs.City.Id == Input.EndCity.Id).Sequence).Sum(rs => rs.TimeFromPrevStop.Ticks))
            }
            ).ToArray();
        return new GridData<Trip>()
        {
            TotalItems = results.Data?.FindTrips?.Count ?? 0,
            Items = trips ?? Enumerable.Empty<Trip>()
        };
    }
    private async Task OpenSignOutDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true};

        var res = await (await _DialogService.ShowAsync<BuyTicketDialog>("Confirm ticket purchase", options)).Result;
        if (!res.Canceled)
        {
            await dataGrid.ReloadServerData();
        }
    }


    private async Task FindTrip()
    {
        await dataGrid.ReloadServerData();
    }
    public record FindTripInput
    {
        [Required]
        public City? StartCity { get; set; }
        [Required]
        public City? EndCity { get; set; }
        [Required]
        public DateTime Date { get; set; } = DateTime.Today;
        [Required] 
        public int NumberOfPassengers { get; set; }
    }
}
